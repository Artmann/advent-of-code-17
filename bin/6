#!/usr/bin/env ruby

# In this area, there are sixteen memory banks; each memory bank can hold any number of blocks. The goal of
# the reallocation routine is to balance the blocks between the memory banks. The reallocation routine
# operates in cycles. In each cycle, it finds the memory bank with the most blocks (ties won by the
# lowest-numbered memory bank) and redistributes those blocks among the banks. To do this, it
# removes all of the blocks from the selected bank, then moves to the next (by index) memory
# bank and inserts one of the blocks. It continues doing this until it runs out of blocks;
# if it reaches the last memory bank, it wraps around to the first one. The debugger
# would like to know how many redistributions can be done before a blocks-in-banks
# configuration is produced that has been seen before.

# Out of curiosity, the debugger would also like to know the size of the loop: starting from a state that
# has already been seen, how many block redistribution cycles must be performed before that same
# state is seen again?

require_relative '../lib/day6'

cycles, state = Day6.new.recycle_memory_until_duplicate_state_is_found([4, 10, 4, 1, 8, 4, 9, 14, 5, 1, 14, 15, 0, 15, 3, 5])

puts "Output 1:"
puts cycles

cycles, state = Day6.new.recycle_memory_until_duplicate_state_is_found(state)

puts "Output 2:"
puts cycles

